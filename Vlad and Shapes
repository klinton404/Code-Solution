/*
#include<bits/stdc++.h>


#define     ll                              long long int
#define     pb                              push_back
#define     mp                              make_pair
#define     all(x)                          x.begin(),x.end()
#define     rall(x)                         x.rbegin(), x.rend()
#define     sz(x)                           (int)x.size()
#define     vi                              vector<int>
#define     vb                              vector<bool>
#define     vs                              vector<string>
#define     vl                              vector<ll>
#define     si                              set<int>
#define     sl                              set<ll>
#define     ip                              pair<int,int>
#define     lp                              pair<ll,ll>
#define     ips                             pair<string,int>
#define     lps                             pair<string,ll>
#define     ipc                             pair<char,int>
#define     lpc                             pair<char,ll>
#define     vip                             vector<ip>
#define     PQ                              priority_queue
#define     vlp                             vector<lp>
#define     hashmap                         unordered_map
#define     msi                             multiset<int>
#define     msl                             multiset<ll>
#define     spb                             insert
#define     erase_duplicates(x)             x.erase(unique(all(x)),x.end());
#define     all_0(x)                        memset(x,0,sizeof(x))
#define     all_neg(x)                      memset(x,-1,sizeof(x))
#define     all_1(x)                        memset(x,1,sizeof(x))
#define     Faster                          ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);

using namespace std;



void solve(void)
{
    int n;
    cin>>n;

    int row1=0, row2=0;

    string str;
    for(int i=0; i<str.length(); i++)
    {
        for(int j=0; j<str.length(); j++)
        {
            cin>>str;
            row=

        }
    }
    if(k==1)  cout<<"SQUARE \n";
    else      cout<<"TRIANGLE \n";
}


int main()
{
    Faster
    int t;
    cin>>t;
    while(t--)
    {
        solve();
    }
}
*/

#include <iostream>
#include <vector>
#include <string>

using namespace std;

bool isSquare(const vector<string>& grid, int n) {
    int top = -1, bottom = -1, left = -1, right = -1;

    // Find boundaries of the square
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == '1') {
                if (top == -1)
                    top = i;
                bottom = i;
                if (left == -1 || j < left)
                    left = j;
                if (right == -1 || j > right)
                    right = j;
            }
        }
    }

    // Check if the boundaries form a square
    int side = right - left + 1;
    return (bottom - top + 1 == side && side == right - left + 1);
}

bool isTriangle(const vector<string>& grid, int n) {
    int top = -1, bottom = -1, left = -1, right = -1;

    // Find boundaries of the triangle
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == '1') {
                if (top == -1)
                    top = i;
                bottom = i;
                if (left == -1 || j < left)
                    left = j;
                if (right == -1 || j > right)
                    right = j;
            }
        }
    }

    // Check if the boundaries form a triangle
    int height = bottom - top + 1;
    int width = right - left + 1;
    if (height != width)
        return false;

    // Check if all 1's are aligned in the center column
    int center = left + (width - 1) / 2;
    for (int i = top; i <= bottom; ++i) {
        if (grid[i][center] != '1')
            return false;
    }

    return true;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<string> grid(n);
        for (int i = 0; i < n; ++i) {
            cin >> grid[i];
        }

        if (isSquare(grid, n)) {
            cout << "SQUARE\n";
        } else {
            cout << "TRIANGLE\n";
        }
    }

    return 0;
}
